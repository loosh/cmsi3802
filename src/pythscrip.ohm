Pythscrip {
  Program   = Statement+
  Statement = FuncDecl
            | PrintStmt
            | IfStmt
            | LoopStmt
            | Primary_call
            | VarDecl
            | Exp
            | TryStmt
            | throw Exp                                --throw
            | return Exp                               --return
            | return                                   --shortreturn    
            | break                                    --break
            | continue                                 --continue
  
  VarDecl   = id "=" Exp
      
  FuncDecl  = "f" id Params "=>" Statement* ";"
  Params    = "(" ListOf<Param, ","> ")"
  Param     = id

  Exp       = Exp1 "?" Exp1 "!" Exp                    --conditional
            | Exp1
  Exp1      = Exp1 ("|" Exp2)*                         --or
            | Exp1 ("&" Exp2)*                         --and
            | Exp2
  Exp2      = Exp2 relop Exp3                          --relational
            | Exp3
  Exp3      = Exp3 assignop Exp3                       --math_assign
            | Postfix
  Postfix   = Postfix ("++" | "--" | "F")              --unary
            | Term
  Term      = binaryop Term Term                       --binary
            | Factor
  Factor    = Primary "^" Factor                       --exponential
            | Prefix 
  Prefix    = ("#" | "~" | "_") Prefix                 --unary
            | Primary
  Primary   = numlit
            | stringlit
            | Primary "(" ListOf<Exp, ","> ")"         --call
            | "[" ListOf<Exp, ","> "]"                 --array
            | "{" ListOf<DictItem, ","> "}"            --dict
            | Primary ("." | "?.") id                  --member
            | Primary "[" Exp "]"                      --subscript        
            | id                                       --id              

  relop     = "<=" | ">=" | "==" | "!=" | "<" | ">"
  assignop  = "+=" | "-=" | "*=" | "/=" | "%=" | "^="
  binaryop  = "+" | "-" | "*" | "/" | "%" | "^"

  PrintStmt = log "(" Exp ")"

  IfStmt    = "?" Exp Block "!" Block                  --with_else
            | "?" Exp Block "!" IfStmt                 --nested_if
            | "?" Exp Block                            --plain_if
  
  LoopStmt  = "w" Exp Block                            --while
            | "*" "." digit+ Block                     --repeat
            | id in Exp "," Exp ("," Exp)? Block       --range
            | id in Exp Block                          --direct

  TryStmt   = try Block except Params Block  

  Block     = ":" Statement* ";"

  log       = "log" ~idchar
  function  = "f" ~idchar
  in        = "in" ~idchar
  while     = "w" ~idchar
  try       = "t" ~idchar
  except    = "e" ~idchar
  break     = "br" ~idchar
  continue  = "ct" ~idchar
  throw     = "th" ~idchar
  return    = "r" ~idchar

  id        = ~keyword letter idchar*
  idchar    = alnum | "_"

  keyword   = log | function | in | while | throw 
            |  try | except | break | continue | return

  numlit    = digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?
  
  stringlit = "'" (~"'" validchar)* "'"
  validchar = "\\'" | "\\n" | "\\\\" | any

  DictItem  = id ":" Exp
  space    += "//" (~"\n" any)* --comment
}