Pythscrip {
  Program = Stmt+
  Stmt = Function
       | PrintStmt
       | IfStmt
       | WhileStmt
       | ForStmt
       | FuncCall
       | Assignment
       | Exp
       | RepeatStmt
       | ThrowStmt
       | TryStmt
       | ExceptStmt
       | ReturnStmt
  
  Assignment = id "=" Exp
      
  Function = "f" id "(" Params ")" "=>" Stmt* ";"
  Params = ListOf<Exp, ","> 

  Exp = Exp1 "?" Exp1 "!" Exp           --conditional
      | Exp1
  Exp1 = Exp1 ("|" Exp2)*               --or
       | Exp1 ("&" Exp2)*               --and
       | Exp2
  Exp2 = Exp2 relop Exp3                --relational
       | Exp3
  Exp3 = Exp3 math_assign_op Exp3       --math_assign
       | Exp4
  Exp4 = Exp4 ("++" | "--")             --quickcrement
       | Exp5
  Exp5 = Exp5 "F"                       --factorial
       | Exp6
  Exp6 = "~" Exp6                       --negation
       | Term
  Term = binary_op Term Term            --binary
       | Factor
  Factor = Primary "^" Factor           --exponential
         | Primary
  Primary = numlit
          | stringlit
          | FuncCall
          | "[" ListOf<Exp, ","> "]"      --array
          | "{" ListOf<DictItem, ","> "}" --dict
          | "#" id                        --length       
          | id "[" (digit+ | id) "]"      --array_index       
          | id "." id                     --get_object_dot
          | id "[" Exp "]"                --get_object_bracket        
          | "_" Exp                       --negative
          | id

  relop = "<=" | ">=" | "==" | "!=" | "<" | ">"
  math_assign_op = "+=" | "-=" | "*=" | "/=" | "%=" | "^="
  binary_op = "+" | "-" | "*" | "/" | "%" | "^"

  FuncCall = id "(" Params ")"
  PrintStmt = log "(" Exp ")"

  IfStmt = "?" Exp Block "!" Block      --with_else
         | "?" Exp Block "!" IfStmt     --nested_if
         | "?" Exp Block                --plain_if
  
  LoopIfStmt = "?" Exp LoopBlock "!" LoopBlock   --with_else
             | "?" Exp LoopBlock "!" IfStmt      --nested_if
             | "?" Exp LoopBlock                 --plain_if
  
  WhileStmt = "w" Exp LoopBlock
  ForStmt = id in ForLoopExpression LoopBlock
  RepeatStmt = "*" "." digit+ Block
  TryStmt = try Block
  LoopTryStmt = try LoopBlock
  ExceptStmt = except "(" Params ")" Block
  LoopExceptStmt = except "(" Params ")" LoopBlock  --with_args
                 | except LoopBlock                 --no_args
           
  ReturnStmt = return Exp
  BreakStmt = break
  ContinueStmt = continue
  ThrowStmt = throw Exp
  
  LoopBlock = ":" LoopStmts* ";"
  LoopStmts = Exp 
            | PrintStmt 
            | LoopIfStmt 
            | LoopTryStmt 
            | LoopExceptStmt 
            | BreakStmt 
            | ContinueStmt
  
  ForLoopExpression = RangeExpression+ "," RangeExpression+ ("," digit+)? --range
                    | Exp

  RangeExpression = digit 
                  | id 
                  | "#" id --var_length
  
  Block = ":" Stmt* ";"

  log = "log" ~idchar
  function = "f" ~idchar
  in = "in" ~idchar
  while = "w" ~idchar
  try = "t" ~idchar
  except = "e" ~idchar
  break = "br" ~idchar
  continue = "ct" ~idchar
  throw = "th" ~idchar
  return = "r" ~idchar

  id = ~keyword letter idchar*
  idchar = alnum | "_"

  keyword = log | function | in | while | throw |  try | except | break | continue | return

  numlit = digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?
  
  stringlit = "'" (~"'" validchar)* "'"
  validchar = "\\'" | "\\n" | "\\\\" | any

  DictItem = id ":" Exp
  space    += "//" (~"\n" any)* --comment
}